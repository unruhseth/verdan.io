from flask import Blueprint, request, jsonify
from app.extensions import db
from .models import create_app_tables
from .services import {{ app_name.title().replace('_', '') }}Service
from app.utils.auth_helpers import any_admin_required
import logging

{{ app_name }}_bp = Blueprint("{{ app_name }}", __name__, url_prefix="/{{ app_name }}")
logger = logging.getLogger(__name__)

@{{ app_name }}_bp.route("/install", methods=["POST"])
@any_admin_required
def install_app():
    """Install this app for an account"""
    data = request.json
    account_id = data.get("account_id")
    if not account_id:
        return jsonify({"error": "Account ID is required"}), 400
    
    if install_{{ app_name }}(account_id):
        return jsonify({"message": "App installed successfully"}), 200
    else:
        return jsonify({"error": "Installation failed"}), 400

@{{ app_name }}_bp.route("/uninstall", methods=["POST"])
@any_admin_required
def uninstall_app():
    """Uninstall this app for an account"""
    data = request.json
    account_id = data.get("account_id")
    if not account_id:
        return jsonify({"error": "Account ID is required"}), 400
    
    if uninstall_{{ app_name }}(account_id):
        return jsonify({"message": "App uninstalled successfully"}), 200
    else:
        return jsonify({"error": "Uninstallation failed"}), 400

{% for endpoint in endpoints %}
@{{ app_name }}_bp.route("{{ endpoint.path }}", methods={{ endpoint.methods }})
{% if endpoint.auth_required %}@any_admin_required{% endif %}
def {{ endpoint.name }}({% if '{id}' in endpoint.path %}item_id{% endif %}):
    """{{ endpoint.description }}"""
    try:
        {% if 'GET' in endpoint.methods %}
        {% if '{id}' in endpoint.path %}
        item = {{ endpoint.model }}.query.get(item_id)
        if not item:
            return jsonify({"error": "Item not found"}), 404
        return jsonify(item.to_dict()), 200
        {% else %}
        items = {{ endpoint.model }}.query.all()
        return jsonify([item.to_dict() for item in items]), 200
        {% endif %}
        {% elif 'POST' in endpoint.methods %}
        data = request.json
        item = {{ endpoint.model }}(**data)
        db.session.add(item)
        db.session.commit()
        return jsonify(item.to_dict()), 201
        {% elif 'PUT' in endpoint.methods %}
        item = {{ endpoint.model }}.query.get(item_id)
        if not item:
            return jsonify({"error": "Item not found"}), 404
        data = request.json
        for key, value in data.items():
            setattr(item, key, value)
        db.session.commit()
        return jsonify(item.to_dict()), 200
        {% elif 'DELETE' in endpoint.methods %}
        item = {{ endpoint.model }}.query.get(item_id)
        if not item:
            return jsonify({"error": "Item not found"}), 404
        db.session.delete(item)
        db.session.commit()
        return jsonify({"message": "Item deleted"}), 200
        {% endif %}
    except Exception as e:
        logger.error(f"Error in {{ endpoint.name }}: {str(e)}")
        db.session.rollback()
        return jsonify({"error": str(e)}), 500
{% endfor %} 